[
["index.html", "Automating Excel Preface Tips", " Automating Excel Preface This workbook is a general instruction guide for analysts on how to make their Excel worksheets update automatically and contain other dynamic elements. This will prevent you from having to copy and paste data, formulas, and update charts. It will also reduce the number of errors and the time it takes to update data in Excel. There are four chapters, each for a method of automating the spreadsheet with specific examples and how-to steps outlined in each: Chart auto update Set constant baseline period in chart Add a record to a table when there is new data in the data sheet Automatically update the table or chart title when the table has been updated Example Excel workbooks have also been created and are linked to in the individual chapters when they are used. HSMR_TableA1a_Automated HSMR_TableA1b_Automated Tips If R is used in the data wrangling/analysis process then the openxlsx package can be used to automitcally populate the data tab, again decreasing manual steps in the workflow. Before starting to design/re-design an Excel table, consider all the data requirements to populate the content. This will include not just standard data items such as figures and labels, but also items required for titles and footnotes. This many require additions to, or re-structuring of, the underlying data. The ‘dynamic ranges’ formula, offset(), in Excel will be key when creating charts which update automatically, so it will be useful to be familiar with this. VLOOKUP will be used to search data and create cell content. In order to create drop-down selection, we recommend using an alternative method to macros by clicking: Developer &gt; Insert &gt; Form Controls &gt; Combo Box (see ‘HSMR_TableA1a_automated.xlsm’ for examples.) "],
["charts-auto-update.html", "1 Charts Auto-Update Steps Details", " 1 Charts Auto-Update Task: to have the Excel charts automatically update with the addition of new rows in a table. Steps Replace every formula in the chart with a named formula that includes an offset function to auto-detect the data range dynamically. For every data series that you want to automatically update: Start by creating a named formula. Then, create an offset function inside the named formula: Reference the column of the data series that you wish to update. Reference the number of rows of the table which is being updated. Save the named formula. Have the data series you want to change reference this new named formula. Details In this worked example we are using HSMR_TableA1a_Automated, with sheet “Chart2”. Each quarter a new row will be added, we need to make our chart automically update to include this new data. We can do this with an OFFSET function but need to set this up as a named function to then include in our Chart Series values. First, set up a dynamic count for the number of rows in the table. In this example, we’ve set up a sheet for calculations, “Sheet 1”&quot; and entered the formula =COUNTA(Table1!C:C)-1 in one of the cells - this will count the number of non-blank cells in this range. Go to the “Formulas” tab and then click on the “Name Manager” button: Create a new name by clicking on “New…” Name and add reference forumla. In this example, we’ve named it “ChartData” and the formula is =OFFSET(Table1!$E$11, 0, 0, H5, 1). Finally, select the chart and right-click, click on “Select Data…”, and then click on “Edit” for the series values. Add the named function as the series value. These steps should then be repeated for the X-Axis values, and once for each line within your chart. After completing this, the charts should be automically updated with each new quarter’s data that is added. "],
["chart-baseline.html", "2 Chart Baseline Steps Details", " 2 Chart Baseline Task: to add a constant baseline area to a chart in Excel. Steps Insert a new data series in the table. Set the series values to be a positive value p for all quarters whch are in the baseline period and set them to 0 for quarters which aren’t in the baseline period. Set the chart type of this data series to ‘Column’. Plot this series on the “secondary axis”. Change the gap width of the columns to 0. Set the maximum value of the secondary axis to a value less than p. Remove any visible parts of the secondary axis. Set the transparency of the columns to 50% (to allow lines to be visible that are behind the columns) and choose an appropriate colour. Details In this worked example we are using HSMR_TableA1a_Automated, with sheets Table1 and Chart1. Our data includes a baseline period that we need to show on our chart. We do this by adding another data series within the same chart. First, right-click on the chart and click “Select Data…”, on the screen that appears click “Add” for a new series. Name the new series, in this example we’ve named it “Baseline_Area”. You’ll also need to know how many data points (e.g. number of quarters) that are in the baseline period. The series values will then be any number repeated the number of times there are data points. In this example, we have 12 quarters that are part of our baseline, we have chosen the number “1”, and filled in “1” 12 times. Now, back at the chart, right-click on any of the new data points and select “Change Series Chart Type”. From the available chart types, go to “Column” and select “Clustered Column”. Depending on the version of Excel, you may also be able to select “Secondary Axis” too (there’s another way in the next step). The chart will now have bars across the baseline period, we’re getting there. To have them fill the space, right-click on one of the bars and select “Format Data Series…”. In the menu that appears there’s a couple of things to do: In “Series Options”, change the Gap Width to 0%. If you weren’t able to change the Baseline to a secondary axis in the previous step, you can do that here too. Under “Plot Series On”, click “Secondary Axis”. You can also change the colour under “Fill”. Choose a suitable solid fill and change the transparency to 50% (this is so it doesn’t obscure the data points that will be in the baseline period). The area is now nearly covered but doesn’t go right to the top, there’s also a secondary axis that we need to get rid of. Go to the secondary axis (right-hand side) and right-click to select “Format Axis”. In this menu: Change the “Maximum Bound” to a number less than the value used in step 2. In this example we used 1 so we’ll make the maximum 0.5. Change the “Major type” tick marks to be “None”. This will remove the marks on the axis that represent the value points. Finally, change the “Axis Labels” or “Label Position” (depending on your version of Excel) to “None”. This will remove any words from the axis. That’s the baseline period added to the chart and will adapt with any data changes. The output from this example looks like this: "],
["auto-add-table-row.html", "3 Auto-Add Table Row Steps Details", " 3 Auto-Add Table Row Task: to create a new row in an Excel table when new data is added, in this instance quarters. Steps Reference columns within the table need to be calculated from a formula. Create a VBA script: Check if there are more quarters of data in the data tab If yes, insert a new row. Details In this worked example we are using HSMR_TableA1a_Automated, with sheet Table1. Each quarter new data is added to the data tab and a new row will need to be added to the table to represent this. First, set up a dynamic count for the number of entries (i.e. number of quarters) in the data. In this example, we’ve set up a sheet for calculations, “Sheet 1” and entered the formula =MAX(smr_data!B:B) - this will count the number of non-blank cells in this range across columns within the sheet. We then have to set 2 columns in our table to be formulas in the sheet we have called “Table1”. Column A - this is simple, we just have to increase the number by 1 for each new row. So each cell equals the cell above plus 1, except the cell against the first quarter which should have a value of 1. Column B - in this column, the quater and year are named. So for this we will need to create a four column reference table (here, we right-clicked on I and clicked insert 4 times). The table we created looks like this with the formulas listed below. Col I (Qtrs_from_Start) - this follows the same format as for Column A, except that we start the count at 0. Col J (Qtr-within_Year) - This requires its own reference table which we have created in “Sheet 1” for Sheet1!$A$4:$C$7 in the formula. That table should look like the screenshot below. The full formula to use in column J is: =VLOOKUP(MOD(&lt;Qtrs_from_Start&gt;, 4), T$12:V$15, 2). Col K (Year) - = &lt;Start Year&gt; + QUOTIENT(&lt;Qtrs_from_Start&gt;, 4). As an example, the first formula for K11 will be =2011 + QUOTIENT(I11, 4). Col L (Quarter) - =CONCATENATE(&lt;Qtr_within_Year, &quot; &quot;, &lt;Year&gt;). As an example, the first formula for L11 will be =CONCATENATE(J11, &quot; &quot;, K11). Finally, we can change our column B to be a formula. For this, we need to include a p (provisional) at the end of the final row in the table. The formula will look like this: =&lt;Year&gt; &amp; IF(&lt;Quarters_of_Data+1), &quot;p&quot;, &quot;&quot;). The worked example is shown below: The next step is to make quite a simple VBA script that checks if there are more quarters added to our data tab that are not included in the table. If this is true then it copies the new data and inserts as the last row in our table. First, ensure Macros are enabled on your workbook (you may need to close and re-open the document), then click on the View tab and then select Macros. On the page that appears, enter the name of the Macro and click “Create”. Then, copy the code below into the VBA editor and save it. Once the Macro is set up, you can set up options (click “Options” in the Macro dialogue box) to create a shortcut key to run the code without having to find it in the Macro menus. Sub CopyAndInsertLastLineOfTable() &#39; &#39; CopyAndInsertLastLineOfTable Macro &#39; &#39; Keyboard Shortcut: Ctrl+u &#39; &#39; If the number of quarters of data in the data tab is greater than the number of rows in the table, &#39; then run the following code. If Worksheets(&quot;Table1&quot;).Range(&quot;B2&quot;).Value &gt; Worksheets(&quot;Sheet1&quot;).Range(&quot;B1&quot;).Value Then &#39; Find the last row in the table. &#39; The cell &quot;B1&quot; counts the current number of rows in the table while the +10 adjusts for &#39; the position of the first row. last_row_in_table = Worksheets(&quot;Sheet1&quot;).Range(&quot;B1&quot;).Value + 10 &#39; Copy the last row in the table. Worksheets(&quot;Table1&quot;).Rows(last_row_in_table).Copy &#39; Select the row after the last row in the table. Rows((last_row_in_table + 1)).Select &#39; Insert the copied row right after the last row in the table. Select.Insert Shift:=x1Down, CopyOrigin:=xlFormatFromLeftOrAbove End If End Sub "],
["title-auto-update.html", "4 Title Auto-Update Steps Details", " 4 Title Auto-Update Task: to automatically update the chart title based on the time period of the data we’re showing. Steps Find the last time period for which we have records. (In this example records are only added, not removed, so the start date will remain the same, January 2011). Find the number of records that are in the table. Use a VLOOKUP to find that last month and year for which we have data. Join the fixed part of our title with the dynamic section using formula. (Add a p to the last date for provisional data). Details In this worked example we are using HSMR_TableA1b_Automated, with sheets Table1 and Chart2. Each quarter a new row will be added, we need to make our title automically update to include this information. Here we will need to create a four column reference table (for this, we right-clicked on column I and clicked insert 4 times). *This step was completed in for the previous chapter, “Auto-Add Table Row.* The table we created looks like this with the formulas listed below. Col I (Qtrs_from_Start) - this follows the same format as for Column A, except that we start the count at 0. Col J (Qtr-within_Year) - This requires its own reference table which we have created in “Sheet 1” for Sheet1!$A$4:$C$7 in the formula. That table should look like the screenshot below. The full formula to use in column J is: =VLOOKUP(MOD(&lt;Qtrs_from_Start&gt;, 4), T$12:V$15, 2). Col K (Year) - = &lt;Start Year&gt; + QUOTIENT(&lt;Qtrs_from_Start&gt;, 4). As an example, the first formula for K11 will be =2011 + QUOTIENT(I11, 4). Col L (Quarter) - =CONCATENATE(&lt;Qtr_within_Year, &quot; &quot;, &lt;Year&gt;). As an example, the first formula for L11 will be =CONCATENATE(J11, &quot; &quot;, K11). Create a lookup table like this: Compose the formula: Initial start of title: “Chart 1 - Hospital Standardised Mortality Ratio: January 2011 -” Last month: =VLOOKUP(&lt;remainder_of_quarter_number&gt;,&lt;lookup_table&gt;,&lt;3rd_column&gt;), e.g. =VLOOKUP(MOD(MAX(Table1!$I:$I),4),Sheet1!$A$4:$C$7,3). (Since our data is split up by quarter, there are only 4 months that could be the last month of each quarter (March, June, September, or December). We then take our maximum “Qtrs_from_Start”, divide that by 4 (qtrs per year) and then find the remainder. This remainder will tell us the last month of the last quarter within the year that our last record is in, which is what we’re looking for.) Last year: =MAX(&lt;Year&gt;) - in this example, =MAX(Table1!$K:$K). Final p character: “p”. This all creates the formula: &quot;Chart 1 - Hospital Standardised Mortality Ratio: January 2011 - &quot; &amp; VLOOKUP(MOD(MAX(TABLE1!$I:$I),4),Sheet1!$A$A:$C$7,3) &amp; MAX(Table1!$K:$K) &amp; &quot;p&quot; into the place where our chart title should go. "]
]
